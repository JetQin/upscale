import com.github.tomakehurst.wiremock.junit.WireMockRule
import io.github.jetqin.upscale.domain.Person
import org.junit.Before
import org.junit.Rule
import org.springframework.http.HttpMethod
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.client.RestTemplate
import spock.lang.Specification
import org.junit.experimental.categories.Category
import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor
import static com.github.tomakehurst.wiremock.client.WireMock.givenThat
import static com.github.tomakehurst.wiremock.client.WireMock.matching
import static com.github.tomakehurst.wiremock.client.WireMock.urlMatching
import static com.github.tomakehurst.wiremock.client.WireMock.verify
import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig
import static org.junit.Assert.assertTrue

class PersonCreateSpec extends Specification{

//    @Rule
//    WireMockRule wireMockRule = new WireMockRule(wireMockConfig().port(8089).httpsPort(8443));
//
//    RestTemplate restTemplate;
//
//    ResponseEntity response;
//
//    @Before
//    public void setup(){
//        restTemplate = new RestTemplate()
//        response = null
//    }

    def 'update person name'() {
//        expect: 'Should return the correct message'
//        println 'Integration test: should return the correct message'
//        messageService.getMessage() == 'Hello World!'
//        ResponseEntity<String> response = restTemplate.exchange("http://localhost:8089/person/list", HttpMethod.GET, entity, String.class)
//        assertTrue(response.getStatusCode().equals(HttpStatus.OK))
//        assertTrue(response.getBody().equals("[\n" +
//                "  {\n" +
//                "    \"id\": 1,\n" +
//                "    \"name\": \"Jet\"\n" +
//                "  },\n" +
//                "  {\n" +
//                "    \"id\": 2,\n" +
//                "    \"name\": \"Alex\"\n" +
//                "  }\n" +
//                "]"))
//        verify(getRequestedFor(urlMatching("/person/list"))
//                .withHeader("Content-Type", matching("application/json"))
//        )

        given:

        def person = new Person(1L, "Jet", Collections.emptyList())

        when:
            person.setName("Bruce")

        then:
            person.getName() == "Bruce"

    }


}